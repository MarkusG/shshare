#!/bin/bash
# share screenshots or screencasts of the entire screen, a window, or a region

print_usage() {
	printf "Usage:\n" 1>&2
	printf "\t$(basename $0) [OPTION]...\n" 1>&2
	printf "\nHelp Options:\n" 1>&2
	printf "\t-h\t\t\t\tPrint this help message\n" 1>&2
	printf "\\nApplication Options:\n" 1>&2
	printf "\t-t, --type TYPE\t\t\tCapture type\n" 1>&2
	printf "\t-s, --selection SELECTION\tSelection type\n" 1>&2
	printf "\t-d, --destination DESTINATION\tUpload destination\n" 1>&2
	printf "\t-w, --wait TIME\t\t\tWait time\n" 1>&2
	printf "\t    --stop-screencast\t\tStop the currently recording screencast\n" 1>&2
	printf "\nSee shshare(1) for more information\n" 1>&2
}

finish_screencast() {
	if [[ $FFMPEG_PID -eq 0 ]]; then
		exit 0
	fi

	kill -15 $FFMPEG_PID
	wait $FFMPEG_PID
	share $DESTINATION < /tmp/screencast.mp4
	rm /tmp/screencast.mp4
	exit 0
}

trap finish_screencast 10

error_exit() {
	echo "$(basename $0): ${1:-"Unknown error"}" 1>&2
	exit 1
}


share() {
	CONFIG_DIR=$([[ -z $XDG_CONFIG_HOME ]] && echo "$HOME/.config" || echo $XDG_CONFIG_HOME)
	case $1 in
		"clipboard")
			if [[ $TYPE != "screenshot" ]]; then
				error_exit "Cannot copy type $TYPE to clipboard"
			fi
			xclip -selection clipboard -target image/png
			;;
		"upload")
			UPLOADER=$CONFIG_DIR/shshare/uploader.sh
			[[ ! -e $UPLOADER ]] && UPLOADER=/etc/shshare/uploader.sh
			case $TYPE in
				"screenshot")
					$UPLOADER image
					;;
				"screencast")
					$UPLOADER video
					;;
			esac
			;;
		*)
			if [[ -n $1 ]]; then
				error_exit "Invalid destination"
			else
				error_exit "No destination provided"
			fi
			;;
	esac
}

if [[ $# -eq 0 ]]; then
	print_usage
	exit 1
fi

TYPE=0
SELECTION=0
DESTINATION=0
WAIT=0
POSITIONAL=()

while [[ $# -gt 0 ]]
do
	key="$1"
	case $key in
		-t|--type)
			TYPE="$2"
			shift
			shift
			;;
		-s|--selection)
			SELECTION="$2"
			shift
			shift
			;;
		-d|--destination)
			DESTINATION="$2"
			shift
			shift
			;;
		-w|--wait)
			WAIT="$2"
			shift
			shift
			;;
		--stop-screencast)
			killall -10 $(basename $0)
			exit 0
			;;
		-h|--help)
			print_usage
			;;
		*)
			POSITIONAL+=("$1")
			shift
			;;
	esac
done
set -- $"{POSITIONAL[@]}"

if [[ !($WAIT =~ ^-?\.?[0-9]+$) ]]; then
	error_exit "Invalid delay: $WAIT"
fi
	

case $TYPE in
	"screenshot")
		case $SELECTION in
			"region")
				maim --delay $WAIT --select --hidecursor | share $DESTINATION
				;;
			"focused")
				maim --delay $WAIT --window=$(xdotool getactivewindow) --hidecursor | share $DESTINATION
				;;
			"full")
				maim --delay $WAIT | share $DESTINATION
				;;
		esac
		;;
	"screencast")
		if [[ $SELECTION != "region" ]]; then
			echo "Unsupported screencast selection: $SELECTION" 1>&2 # if someone wants to record their entire screen they should use OBS anyway
		fi
		region=$(slop --format="%x,%y %wx%h")
		size=$(echo $region | cut -d' ' -f 2)
		offset=$(echo $region | cut -d' ' -f 1)
		sleep $WAIT
		ffmpeg \
			-video_size $size \
			-framerate 60 \
			-f x11grab \
			-i :0.0+$offset \
			-pix_fmt yuv420p \
			-vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" \
			/tmp/screencast.mp4 &
		FFMPEG_PID=$!
		wait $FFMPEG_PID # keep alive so we can catch SIGUSR1 when the user wants to stop the recording
		;;
esac
